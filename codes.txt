####  Differential expression analysis
install.packages("lncDIFF")
library(lncDIFF)
ex<-read.table("ex",sep="\t",header=T, row.names=1, blank.lines.skip = FALSE)
group<-c(rep("GBM",51),rep("LGG",486))
result=lncDIFF(edata=ex,group=group)

####  Differential methylation analysis
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("minfi") 
BiocManager::install("IlluminaHumanMethylation450kmanifest")
BiocManager::install("IlluminaHumanMethylation450kanno.ilmn12.hg19")
BiocManager::install("impute")
BiocManager::install("wateRmelon") 

install.packages("gplots")
install.packages("cluster") 

library("minfi")	
library("impute")
library("wateRmelon")

info=read.table("group.txt",sep="\t",header=T)
rt=read.table("HumanMethylation450",sep=" ",header=T, row.names=1, blank.lines.skip = FALSE)
matData=as.matrix(rt)
dim(matData)[1]*dim(matData)[2]-dim(as.matrix(matData[matData>0|matData<0]))[1]
matData=matData[rowMeans(matData)>0.005,] 
sji<-sample(1:537, 50) 
pdf(file="rawBox.pdf")
boxplot(matData[,sji],col = "blue",xaxt = "n",outline = F)
dev.off()
matData = betaqn(matData)
pdf(file="normalBox.pdf")
boxplot(matData[,sji],col = "red",xaxt = "n",outline = F)
dev.off()
grset=makeGenomicRatioSetFromMatrix(matData,what="Beta") 
sji2<-sample(1:537, 20) 
pdf(file="densityBeanPlot.pdf")
par(oma=c(2,10,2,2))
densityBeanPlot(matData[,sji2])
dev.off()
pdf(file="mdsPlot.pdf")
mdsPlot(matData, numPositions = 1000, sampGroups = info$Group, sampNames = info$Sample)
dev.off()
M = getM(grset)
dmp <- dmpFinder(M, pheno=info$Group, type="categorical")
dmpDiff=dmp[(dmp$pval<0.001) & (abs(dmp$intercept)>0.2) & (is.na(dmp$qval)==F),]
write.table(dmpDiff,file="dmpDiff.xls",sep="\t",quote=F)
class <- info$Group
designMatrix <- model.matrix(~factor(class))
colnames(designMatrix) <- c("GBM","LGG")
dmrs <- bumphunter(grset, design = designMatrix, cutoff = 0.2, B=10, type="Beta")

##### Annotation
table_annovar.pl dmrs.avinput humandb/ -buildver hg19 -out myanno -protocol lncGene -operation g -nastring . -csvout

##### Expression heatmap
install.packages("gplots")
library("gplots")	
lncxeREStop100<-read.csv("lncxeREStop100.csv")
row.names(lncxeREStop100) <- lncxeREStop100[, 1]
lncxeREStop100<- lncxeREStop100[, -1]
df <- as.matrix((scale(lncxeREStop100)))
pdf(file="heatmaptop100.pdf",height=50,width=38)
heatmap.2(df, scale = "none", col=bluered(100),breaks=seq(-21,23,length.out=101),trace = "none", density.info = "none",distfun=function(mydata) dist(mydata,method='manhattan'))
dev.off()

##### Survival analysis
install.packages("survival")
library(survival)
rt=read.table("lassoRisk1.txt",header=T,sep="\t")
diff=survdiff(Surv(futime, fustat) ~risk,data = rt)
pValue=1-pchisq(diff$chisq,df=1)
pValue=signif(pValue,4)
pValue=format(pValue, scientific = TRUE)
fit <- survfit(Surv(futime, fustat) ~ risk, data = rt)
summary(fit)
pdf(file="survival1.pdf",width=5.5,height=5)
plot(fit, 
     lwd=2,
     col=c("red","blue"),
     xlab="Time (year)",
     ylab="Survival rate",
     main=paste("Survival curve (p=", pValue ,")",sep=""),
     mark.time=T)
legend("topright", 
       c("high expression", "low expression"),
       lwd=2,
       col=c("red","blue"))
dev.off()

rt=read.table("lassoRisk2.txt",header=T,sep="\t")
diff=survdiff(Surv(futime, fustat) ~risk,data = rt)
pValue=1-pchisq(diff$chisq,df=1)
pValue=signif(pValue,4)
pValue=format(pValue, scientific = TRUE)
fit <- survfit(Surv(futime, fustat) ~ risk, data = rt)
summary(fit)
pdf(file="survival2.pdf",width=5.5,height=5)
plot(fit, 
     lwd=2,
     col=c("red","blue"),
     xlab="Time (year)",
     ylab="Survival rate",
     main=paste("Survival curve (p=", pValue ,")",sep=""),
     mark.time=T)
legend("topright", 
       c("high expression", "low expression"),
       lwd=2,
       col=c("red","blue"))
dev.off()

##### Univariate Cox regression analysis
install.packages("survival")
install.packages("forestplot")
library(survival)
library(forestplot)
options(forestplot_new_page = FALSE)
clrs <- fpColors(box="green",line="darkblue", summary="royalblue")            
rt=read.table("expTime.txt",header=T,sep="\t",check.names=F,row.names=1)
outTab=data.frame()
for(i in colnames(rt[,3:ncol(rt)])){
  cox <- coxph(Surv(futime, fustat) ~ rt[,i], data = rt)
  coxSummary = summary(cox)
  coxP=coxSummary$coefficients[,"Pr(>|z|)"]
  outTab=rbind(outTab,
               cbind(id=i,
                     HR=coxSummary$conf.int[,"exp(coef)"],
                     HR.95L=coxSummary$conf.int[,"lower .95"],
                     HR.95H=coxSummary$conf.int[,"upper .95"],
                     pvalue=coxSummary$coefficients[,"Pr(>|z|)"])
  )
}
write.table(outTab,file="uniCox.xls",sep="\t",row.names=F,quote=F)

rt=read.table("uniCox.xls",header=T,sep="\t",row.names=1,check.names=F)
data=as.matrix(rt)
HR=data[,1:3]
hr=sprintf("%.3f",HR[,"HR"])
hrLow=sprintf("%.3f",HR[,"HR.95L"])
hrHigh=sprintf("%.3f",HR[,"HR.95H"])
pVal=data[,"pvalue"]
pVal=ifelse(pVal<0.001, "<0.001", sprintf("%.3f", pVal))
tabletext <-
  list(c(NA, rownames(HR)),
       append("pvalue", pVal),
       append("Hazard ratio",paste0(hr,"(",hrLow,"-",hrHigh,")")) ) 
pdf(file="forest.pdf",
    width = 6,
    height = 4,
)
forestplot(tabletext,
           rbind(rep(NA, 3), HR),
           col=clrs,
           graphwidth=unit(50, "mm"),
           xlog=T,
           lwd.ci=2,
           boxsize=0.4,
           xlab="Hazard ratio"
)
dev.off()

##### LASSO regression analysis
install.packages("glmnet")
install.packages("survival")
library("glmnet")
library("survival")
rt=read.table("expTime.txt",header=T,sep="\t",row.names=1)
rt$futime=rt$futime/365
gene=read.table("gene.txt",header=F)
rt=rt[,c("futime","fustat",as.vector(gene[,1]))]
x=as.matrix(rt[,c(3:ncol(rt))])
y=data.matrix(Surv(rt$futime,rt$fustat))
fit <- glmnet(x, y, family = "cox", maxit = 1000)
pdf("lambda.pdf")
plot(fit, xvar = "lambda", label = TRUE)
dev.off()
cvfit <- cv.glmnet(x, y, family="cox", maxit = 1000)
pdf("cvfit.pdf")
plot(cvfit)
abline(v=log(c(cvfit$lambda.min,cvfit$lambda.1se)),lty="dashed")
dev.off()
coef <- coef(fit, s = cvfit$lambda.min)
index <- which(coef != 0)
actCoef <- coef[index]
lassoGene=row.names(coef)[index]
geneCoef=cbind(Gene=lassoGene,Coef=actCoef)
riskScore=predict(cvfit, newx = x, s = "lambda.min",type="response")
outCol=c("futime","fustat",lassoGene)
risk=as.vector(ifelse(riskScore>median(riskScore),"high","low"))
outTab=cbind(rt[,outCol],riskScore=as.vector(riskScore),risk)

##### ROC curve
install.packages("survivalROC")
library(survivalROC)
rt=read.table("lassoRiskROC.txt",header=T,sep="\t",check.names=F,row.names=1)
pdf(file="ROC.pdf",width=6,height=6)
par(oma=c(0.5,1,0,1),font.lab=1.5,font.axis=1.5)
roc=survivalROC(Stime=rt$futime, status=rt$fustat, marker = rt$riskScore,
predict.time =5, method="KM")
plot(roc$FP, roc$TP, type="l", xlim=c(0,1), ylim=c(0,1),col='red',
xlab="False positive rate", ylab="True positive rate",
main=paste("ROC curve (", "AUC = ",round(roc$AUC,3),")"),
lwd = 2, cex.main=1.3, cex.lab=1.2, cex.axis=1.2, font=1.2)
abline(0,1)
dev.off()

##### Prognosis heatmap
install.packages("pheatmap")
library(pheatmap)
rt=read.table("riskCliExp1.txt",sep="\t",header=T,row.names=1,check.names=F)
rt=t(rt)
outpdf="heatmap1.pdf"
Type=read.table("riskCliGroup.sig1.txt",sep="\t",header=T,row.names=1,check.names=F)
Type=Type[order(Type$risk),]
rt=rt[,row.names(Type)]
pdf(outpdf,height=6.3,width=10)
pheatmap(rt, annotation=Type, 
         color = colorRampPalette(c("green", "white", "red"))(50),
         cluster_cols =F,
         fontsize=7.5,
         fontsize_row=8,
         scale="row",
         show_colnames=F,
         fontsize_col=3)
dev.off()

rt=read.table("clusterCliExp2.txt",sep="\t",header=T,row.names=1,check.names=F)
outpdf="heatmap2.pdf"
Type=read.table("clusterCliGroup.Sig2.txt",sep="\t",header=T,row.names=1,check.names=F)
Type=Type[order(Type$Cluster),]
rt=rt[,row.names(Type)]
pdf(outpdf,height=6.5,width=10)
pheatmap(rt, annotation=Type, 
         color = colorRampPalette(c("green", "white", "red"))(50),
         cluster_cols =F,
         fontsize=8,
         fontsize_row=8,
         scale="row",
         show_colnames=F,
         fontsize_col=3)
dev.off()
